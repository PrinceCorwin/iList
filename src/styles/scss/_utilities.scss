@use 'sass:math';
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.relative {
  position: relative;
}
.sticky {
  position: sticky;
}
$utilities: (
  'box-shadow': (
    'prefix': 'bs',
    'values': (
      'default': 1px 2px 5px rgba(0, 0, 0, 0.4),
      'strong': 5px 5px 10px rgba(0, 0, 0, 0.5),
    ),
  ),
  'padding': (
    'prefix': 'p',
    'values': (
      '0': 0,
      '1': $base-padding,
      '2': $base-padding * 2,
      '3': $base-padding * 3,
      '4': $base-padding * 4,
      '5': $base-padding * 5,
      '6': $base-padding * 6,
      '7': $base-padding * 7,
      '8': $base-padding * 8,
      '9': $base-padding * 9,
      '10': $base-padding * 10,
    ),
  ),
  'padding-left': (
    'prefix': 'pl',
    'values': (
      '0': 0,
      '1': $base-padding,
      '2': $base-padding * 2,
      '3': $base-padding * 3,
      '4': $base-padding * 4,
      '5': $base-padding * 5,
      '6': $base-padding * 6,
      '7': $base-padding * 7,
      '8': $base-padding * 8,
      '9': $base-padding * 9,
      '10': $base-padding * 10,
    ),
  ),
  'padding-right': (
    'prefix': 'pr',
    'values': (
      '0': 0,
      '1': $base-padding,
      '2': $base-padding * 2,
      '3': $base-padding * 3,
      '4': $base-padding * 4,
      '5': $base-padding * 5,
      '6': $base-padding * 6,
      '7': $base-padding * 7,
      '8': $base-padding * 8,
      '9': $base-padding * 9,
      '10': $base-padding * 10,
    ),
  ),
  'padding-top': (
    'prefix': 'pt',
    'values': (
      '0': 0,
      '1': $base-padding,
      '2': $base-padding * 2,
      '3': $base-padding * 3,
      '4': $base-padding * 4,
      '5': $base-padding * 5,
      '6': $base-padding * 6,
      '7': $base-padding * 7,
      '8': $base-padding * 8,
      '9': $base-padding * 9,
      '10': $base-padding * 10,
    ),
  ),
  'padding-bottom': (
    'prefix': 'pb',
    'values': (
      '0': 0,
      '1': $base-padding,
      '2': $base-padding * 2,
      '3': $base-padding * 3,
      '4': $base-padding * 4,
      '5': $base-padding * 5,
      '6': $base-padding * 6,
      '7': $base-padding * 7,
      '8': $base-padding * 8,
      '9': $base-padding * 9,
      '10': $base-padding * 10,
    ),
  ),
  'margin': (
    'prefix': 'm',
    'values': (
      '0': 0,
      '1': $base-margin,
      '2': $base-margin * 2,
      '3': $base-margin * 3,
      '4': $base-margin * 4,
      '5': $base-margin * 5,
      '6': $base-margin * 6,
      '7': $base-margin * 7,
      '8': $base-margin * 8,
      '9': $base-margin * 9,
      '10': $base-margin * 10,
    ),
  ),
  'margin-left': (
    'prefix': 'ml',
    'values': (
      '0': 0,
      '1': $base-margin,
      '2': $base-margin * 2,
      '3': $base-margin * 3,
      '4': $base-margin * 4,
      '5': $base-margin * 5,
      '6': $base-margin * 6,
      '7': $base-margin * 7,
      '8': $base-margin * 8,
      '9': $base-margin * 9,
      '10': $base-margin * 10,
    ),
  ),
  'margin-right': (
    'prefix': 'mr',
    'values': (
      '0': 0,
      '1': $base-margin,
      '2': $base-margin * 2,
      '3': $base-margin * 3,
      '4': $base-margin * 4,
      '5': $base-margin * 5,
      '6': $base-margin * 6,
      '7': $base-margin * 7,
      '8': $base-margin * 8,
      '9': $base-margin * 9,
      '10': $base-margin * 10,
    ),
  ),
  'margin-top': (
    'prefix': 'mt',
    'values': (
      '0': 0,
      '1': $base-margin,
      '2': $base-margin * 2,
      '3': $base-margin * 3,
      '4': $base-margin * 4,
      '5': $base-margin * 5,
      '6': $base-margin * 6,
      '7': $base-margin * 7,
      '8': $base-margin * 8,
      '9': $base-margin * 9,
      '10': $base-margin * 10,
    ),
  ),
  'margin-bottom': (
    'prefix': 'mb',
    'values': (
      '0': 0,
      '1': $base-margin,
      '2': $base-margin * 2,
      '3': $base-margin * 3,
      '4': $base-margin * 4,
      '5': $base-margin * 5,
      '6': $base-margin * 6,
      '7': $base-margin * 7,
      '8': $base-margin * 8,
      '9': $base-margin * 9,
      '10': $base-margin * 10,
    ),
  ),
  'border-radius': (
    'prefix': 'br',
    'values': (
      'default': $base-border-radius,
      'none': 0,
      'xs': $border-radius-xs,
      'sm': $border-radius-sm,
      'md': $border-radius-md,
      'lg': $border-radius-lg,
      'xl': $border-radius-xl,
      'xxl': $border-radius-xxl,
      'full': 50%,
    ),
  ),
  'display': (
    'prefix': 'display',
    'values': (
      'n': none,
      'b': block,
      'f': flex,
      'i': inline,
      'i-b': inline-block,
    ),
  ),
  'font-size': (
    'prefix': 'fs',
    'values': (
      'xs': $font-size-xs,
      'sm': $font-size-sm,
      'md': $base-font-size,
      'lg': $font-size-lg,
      'xl': $font-size-xl,
      'xxl': $font-size-xxl,
    ),
  ),
  'z-index': (
    'prefix': 'z',
    'values': (
      '0': 0,
      '1': 1,
      '500': 500,
      '1000': 1000,
      '3000': 3000,
      '5000': 5000,
      '10k': 10000,
    ),
  ),
  'overflow': (
    'prefix': 'overflow',
    'values': (
      'hidden': hidden,
      'visible': visible,
      'scroll': scroll,
      'auto': auto,
    ),
  ),
);

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, 'prefix');
  $values: map-get($map, 'values');

  @each $k, $v in $values {
    @if ($prefix == 'p') {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
      .#{$prefix}x-#{$k} {
        #{$property}: 0 $v 0 $v;
      }
      .#{$prefix}y-#{$k} {
        #{$property}: $v 0 $v 0;
      }
    }
    @if ($prefix == 'overflow') {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
      .#{$prefix}x-#{$k} {
        #{$property}-x: $v;
      }
      .#{$prefix}y-#{$k} {
        #{$property}-y: $v;
      }
    }
    @if ($prefix == 'm') {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
      .#{$prefix}x-#{$k} {
        #{$property}: 0 $v 0 $v;
      }
      .#{$prefix}y-#{$k} {
        #{$property}: $v 0 $v 0;
      }
    } @else {
      @if ($k == 'default') {
        .#{$prefix} {
          #{$property}: $v;
        }
      } @else {
        .#{$prefix}-#{$k} {
          #{$property}: $v;
        }
      }
    }
  }
}
@for $i from 1 through 100 {
  .o-#{$i} {
    opacity: math.div($i, 100);
  }
  .w-#{$i} {
    width: math.div($i, 100) * 100%;
  }
}
