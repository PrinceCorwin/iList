@use "sass:math";

// position
@each $key, $val in $position {
  .#{$key} {
    position: #{$val};
  }
}

$utilities: (
  "transform": (
    "prefix": "r",
    "values": (
      "0": 0,
      "45": 45,
      "90": 90,
      "180": 180,
      "270": 270,
      "315": 315,
    ),
  ),
  "box-shadow": (
    "prefix": "bs",
    "values": (
      "default": 1px 2px 10px rgba(0, 0, 0, 0.6),
      "strong": 2px 4px 15px rgba(0, 0, 0, 0.7),
      "light": 1px 2px 10px rgba(255, 255, 255, 0.6),
      "light-strong": 2px 4px 15px rgba(255, 255, 255, 0.7),
    ),
  ),
  "padding": (
    "prefix": "p",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 3,
      "4": $base-padding * 4,
      "5": $base-padding * 5,
      "6": $base-padding * 6,
      "7": $base-padding * 7,
      "8": $base-padding * 8,
      "9": $base-padding * 9,
      "10": $base-padding * 10,
    ),
  ),
  "padding-left": (
    "prefix": "pl",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 3,
      "4": $base-padding * 4,
      "5": $base-padding * 5,
      "6": $base-padding * 6,
      "7": $base-padding * 7,
      "8": $base-padding * 8,
      "9": $base-padding * 9,
      "10": $base-padding * 10,
    ),
  ),
  "padding-right": (
    "prefix": "pr",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 3,
      "4": $base-padding * 4,
      "5": $base-padding * 5,
      "6": $base-padding * 6,
      "7": $base-padding * 7,
      "8": $base-padding * 8,
      "9": $base-padding * 9,
      "10": $base-padding * 10,
    ),
  ),
  "padding-top": (
    "prefix": "pt",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 3,
      "4": $base-padding * 4,
      "5": $base-padding * 5,
      "6": $base-padding * 6,
      "7": $base-padding * 7,
      "8": $base-padding * 8,
      "9": $base-padding * 9,
      "10": $base-padding * 10,
    ),
  ),
  "padding-bottom": (
    "prefix": "pb",
    "values": (
      "0": 0,
      "1": $base-padding,
      "2": $base-padding * 2,
      "3": $base-padding * 3,
      "4": $base-padding * 4,
      "5": $base-padding * 5,
      "6": $base-padding * 6,
      "7": $base-padding * 7,
      "8": $base-padding * 8,
      "9": $base-padding * 9,
      "10": $base-padding * 10,
    ),
  ),
  "margin": (
    "prefix": "m",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 3,
      "4": $base-margin * 4,
      "5": $base-margin * 5,
      "6": $base-margin * 6,
      "7": $base-margin * 7,
      "8": $base-margin * 8,
      "9": $base-margin * 9,
      "10": $base-margin * 10,
    ),
  ),
  "margin-left": (
    "prefix": "ml",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 3,
      "4": $base-margin * 4,
      "5": $base-margin * 5,
      "6": $base-margin * 6,
      "7": $base-margin * 7,
      "8": $base-margin * 8,
      "9": $base-margin * 9,
      "10": $base-margin * 10,
    ),
  ),
  "margin-right": (
    "prefix": "mr",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 3,
      "4": $base-margin * 4,
      "5": $base-margin * 5,
      "6": $base-margin * 6,
      "7": $base-margin * 7,
      "8": $base-margin * 8,
      "9": $base-margin * 9,
      "10": $base-margin * 10,
    ),
  ),
  "margin-top": (
    "prefix": "mt",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 3,
      "4": $base-margin * 4,
      "5": $base-margin * 5,
      "6": $base-margin * 6,
      "7": $base-margin * 7,
      "8": $base-margin * 8,
      "9": $base-margin * 9,
      "10": $base-margin * 10,
    ),
  ),
  "margin-bottom": (
    "prefix": "mb",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 3,
      "4": $base-margin * 4,
      "5": $base-margin * 5,
      "6": $base-margin * 6,
      "7": $base-margin * 7,
      "8": $base-margin * 8,
      "9": $base-margin * 9,
      "10": $base-margin * 10,
    ),
  ),
  "border-radius": (
    "prefix": "br",
    "values": (
      "default": $base-border-radius,
      "none": 0,
      "xs": $border-radius-xs,
      "sm": $border-radius-sm,
      "md": $border-radius-md,
      "lg": $border-radius-lg,
      "xl": $border-radius-xl,
      "xxl": $border-radius-xxl,
      "full": 50%,
    ),
  ),
  "display": (
    "prefix": "d",
    "values": (
      "n": none,
      "b": block,
      "f": flex,
      "i": inline,
      "i-b": inline-block,
    ),
  ),
  "font-size": (
    "prefix": "fs",
    "values": (
      "xs": $font-size-xs,
      "sm": $font-size-sm,
      "md": $base-font-size,
      "lg": $font-size-lg,
      "xl": $font-size-xl,
      "xxl": $font-size-xxl,
    ),
  ),
  "z-index": (
    "prefix": "z",
    "values": (
      "0": 0,
      "1": 1,
      "500": 500,
      "1000": 1000,
      "3000": 3000,
      "5000": 5000,
      "10k": 10000,
    ),
  ),
  "overflow": (
    "prefix": "overflow",
    "values": (
      "hidden": hidden,
      "visible": visible,
      "scroll": scroll,
      "auto": auto,
    ),
  ),
  "text-align": (
    "prefix": "ta",
    "values": (
      "center": center,
      "left": left,
      "right": right,
      "justify": justify,
      "initial": initial,
      "inherit": inherit,
    ),
  ),
);

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, "prefix");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if ($prefix == "p") {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
      .#{$prefix}x-#{$k} {
        #{$property}-left: $v;
        #{$property}-right: $v;
      }
      .#{$prefix}y-#{$k} {
        #{$property}-top: $v;
        #{$property}-bottom: $v;
      }
    } @else if ($prefix == "r") {
      .#{$prefix}-#{$k} {
        #{$property}: rotate(#{$v}deg);
      }
    } @else if ($prefix == "overflow") {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
      .#{$prefix}x-#{$k} {
        #{$property}-x: $v;
      }
      .#{$prefix}y-#{$k} {
        #{$property}-y: $v;
      }
    } @else if ($prefix == "m") {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
      .#{$prefix}x-#{$k} {
        #{$property}: 0 $v 0 $v;
      }
      .#{$prefix}y-#{$k} {
        #{$property}: $v 0 $v 0;
      }
    } @else {
      @if ($k == "default") {
        .#{$prefix} {
          #{$property}: $v;
        }
      } @else {
        .#{$prefix}-#{$k} {
          #{$property}: $v;
        }
      }
    }
  }
}
@for $i from 0 through 100 {
  .transition-#{$i} {
    transition: all math.div($i, 100) * 1s ease-in-out;
  }
  .o-#{$i} {
    opacity: math.div($i, 100);
  }
  .w-#{$i} {
    width: math.div($i, 100) * 100%;
  }
  .w-#{$i*5}px {
    width: $i * 5px;
  }
  .h-#{$i} {
    height: math.div($i, 100) * 100%;
  }
  .h-#{$i*5}px {
    height: $i * 5px;
  }
  .w-#{$i}vw {
    width: #{$i}vw;
  }
  .h-#{$i}vh {
    height: #{$i}vh;
  }
  .minw-#{$i} {
    min-width: math.div($i, 100) * 100%;
  }
  .minw-#{$i*5}px {
    min-width: $i * 5px;
  }
  .minw-#{$i}vw {
    min-width: #{$i}vw;
  }
  .minh-#{$i} {
    min-height: math.div($i, 100) * 100%;
  }
  .minh-#{$i*5}px {
    min-height: $i * 5px;
  }
  .minh-#{$i}vh {
    min-height: #{$i}vh;
  }
  .maxw-#{$i} {
    max-width: math.div($i, 100) * 100%;
  }
  .maxw-#{$i*5}px {
    max-width: $i * 5px;
  }
  .maxw-#{$i}vw {
    max-width: #{$i}vw;
  }
  .maxh-#{$i} {
    max-height: math.div($i, 100) * 100%;
  }
  .maxh-#{$i*5}px {
    max-height: $i * 5px;
  }
  .maxh-#{$i}vh {
    max-height: #{$i}vh;
  }
  .top-#{$i} {
    top: math.div($i, 100) * 100%;
  }
  .bottom-#{$i} {
    bottom: math.div($i, 100) * 100%;
  }
  .right-#{$i} {
    right: math.div($i, 100) * 100%;
  }
  .left-#{$i} {
    left: math.div($i, 100) * 100%;
  }
}
